class HashTable:

    # Construtor da Classe
    def __init__(self, tamanho=17): # __init__ - inicializa os atributos do objeto
        self.tamanho = tamanho # Define o tamanho da Tabela
        self.tabela = [[] for _ in range(tamanho)] # Cria uma lista de listas (encadeamento para tratar colis√µes)
        self.colisoes = 0 # Contador de colis√µes

# ---------------------------------------------------------------------------------------------------------------------

    # Fun√ß√£o hash para calcular o √≠ndice da tabela a partir do CPF

    def hash_funcao(self, cpf):
     return int(cpf) % self.tamanho  # Converte o CPF em n√∫mero e aplica o m√≥dulo pelo tamanho da tabela

# ---------------------------------------------------------------------------------------------------------------------

    # Inser√ß√£o de uma nova pessoa na tabela

    def insercao (self, pessoa):
        indice = self.hash_funcao(pessoa.cpf) # Calcula o √≠ndice da tabela usando o CPF da pessoa
        for p in self.tabela[indice]: # Percorre as pessoas que j√° est√£o no mesmo √≠ndice
            if p.cpf == pessoa.cpf: # Se j√° existir esse CPF, n√£o insere de novo
                print("‚ö†Ô∏è CPF j√° cadastrado!")
                return

        if self.tabela[indice]:
            self.colisoes += 1  # Se a posi√ß√£o j√° tiver algu√©m, ocorreu uma colis√£o
        self.tabela[indice].append(pessoa)  # Adiciona a pessoa na lista do √≠ndice correspondente
# ---------------------------------------------------------------------------------------------------------------------

    # Busca uma pessoa na tabela pelo CPF

    def buscar(self,cpf):
        indice = self.hash_funcao(cpf) # Calcula em qual posi√ß√£o da tabela o CPF deveria estar
        for p in self.tabela[indice]: # Percorre todas as pessoas na lista desse √≠ndice
            if p.cpf == cpf: # Se tiver algu√©m com o CPF igual
                return p # Retorna o objeto Pessoa encontrado
        return None # Se n√£o encontrar ningu√©m, retorna None

# ---------------------------------------------------------------------------------------------------------------------

    # Remove uma pessoa da tabela pelo CPF

    def excluir(self,cpf):
        indice = self.hash_func(cpf)  # Calcula em qual √≠ndice o CPF deveria estar
        for i, p in enumerate(self.tabela[indice]): # Percorre a lista com √çndice + Objeto
            if p.cpf == cpf: # Se encontrar o CPF
                del self.tabela[indice][i] # Remove a Pessoa da Lista
                print("‚úÖ Registro Exclu√≠do!")
                return
        print("‚ö†Ô∏è CPF n√£o encontrado!") # Se n√£o encontrar, mostra o Aviso

# ---------------------------------------------------------------------------------------------------------------------

    # Imprime todo o conteudo da tabela

    def imprimir(self):
        for i, lista in enumerate(self.tabela): # Para cada √≠ndice na tabela
            print(f"√çndice {i} :  {lista}") # Imprimir na tela √çndice e Lista

# ---------------------------------------------------------------------------------------------------------------------

    # Exibe estat√≠sticas sobre a tabela

    def estatisticas(self):
        print(f"üîπ Colis√µes: {self.colisoes}")  # Mostra o n√∫mero de colis√µes
        ocupacao = sum(len(l) for l in self.tabela)  # Conta quantas pessoas foram inseridas no total
        print(f"üîπ Registros armazenados: {ocupacao}")  # Mostra o total de registros
        print(f"üîπ Efici√™ncia: {(ocupacao / self.tamanho):.2f} itens por slot")  # Mostra a m√©dia de ocupa√ß√£o por √≠ndice